// Copyright 2015, Jens Hoffmann
//
// Highly divisible triangular number
// Problem 12
//
// The sequence of triangle numbers is generated by adding the natural numbers.
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The
// first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//
//      1: 1
//      3: 1,3
//      6: 1,2,3,6
//     10: 1,2,5,10
//     15: 1,3,5,15
//     21: 1,3,7,21
//     28: 1,2,4,7,14,28
//
// We can see that 28 is the first triangle number to have over five divisors.
//
// What is the value of the first triangle number to have over five hundred
// divisors?
//
#include <stdio.h>
#include <map>


int getNofDiv(int x) {
    if (x == 0) return 0;
    if (x == 1) return 1;
    int ret = 2;
    int max = 2;
    for (int i = 2; i < x/max; ++i) {
        if (x % i == 0) {
            max = i;
            ret += 2;
        }
    }
    return ret;
}

int main() {
    std::map<int, int> nofDivs;
    int k = 0;
    int n = 0;
    int nofDiv = 0;
    while (nofDiv < 500) {
        k += 1;
        n += k;
        nofDiv = getNofDiv(n);
    }

    printf("Result: %d \n", n);

    return 0;
}

